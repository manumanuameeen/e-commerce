<%- include('../partials/admin/header') %>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Orders Dashboard</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        /* General Reset */
        body,
        h1,
        h2,
        p,
        ul,
        li,
        a {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: #ecf0f1;
            height: 100vh;
            position: fixed;
            padding: 0;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .brand {
            padding: 20px;
            background-color: #243242;
            text-align: center;
        }

        .brand img {
            max-width: 150px;
            height: auto;
        }

        .menu {
            list-style: none;
            padding: 20px 0;
        }

        .menu-item {
            margin: 5px 0;
        }

        .menu-link {
            text-decoration: none;
            color: #ecf0f1;
            padding: 12px 20px;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
        }

        .menu-link i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        .menu-link:hover,
        .menu-link.active {
            background-color: #2980b9;
            color: #ffffff;
        }

        /* Navbar Styles */
        .navbar {
            height: 60px;
            width: calc(100% - 250px);
            margin-left: 250px;
            background-color: #ffffff;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 0;
            z-index: 900;
        }

        .col-nav {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            width: 100%;
        }

        .nav {
            display: flex;
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .img-xs {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
        }

        /* Main Content Styles */
        .main-content {
            margin-left: 250px;
            padding: 80px 20px 20px;
            width: calc(100% - 250px);
        }

        /* Order Dashboard Specific Styles */
        .card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
            margin-bottom: 1.5rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .select-wrapper {
            position: relative;
            display: inline-block;
        }

        .select-wrapper select {
            appearance: none;
            padding: 0.5rem 2rem 0.5rem 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #e2e8f0;
        }

        .badge {
            border-radius: 9999px;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .badge-pending {
            background-color: #FEF3C7;
            color: #92400E;
        }

        .badge-success {
            background-color: #D1FAE5;
            color: #065F46;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
            }

            .sidebar .brand img {
                max-width: 40px;
            }

            .sidebar .menu-link span {
                display: none;
            }

            .menu-link i {
                margin-right: 0;
            }

            .navbar,
            .main-content {
                width: calc(100% - 70px);
                margin-left: 70px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }

        .status-select {
            padding: 0.375rem 0.75rem;
            border-radius: 0.25rem;
            border: 1px solid #ced4da;
            width: 100%;
        }


        .pending {
            background-color: #ffeeba;
        }

        .processing {
            background-color: #b8daff;
        }

        .shipped {
            background-color: #c3e6cb;
        }

        .delivered {
            background-color: #d4edda;
        }

        .cancelled {
            background-color: #f5c6cb;
        }
    </style>
</head>

<body>
   
    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-semibold">Orders</h1>
        </div>
<br>
      
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Date</th>
                        <!-- <th>Customer</th> -->
                        <!-- <th>Total</th> -->
                        <th>Status</th>
                        <th>Return Request</th>
                        <th>Actions</th>
                        <th>view order</th>
                        

                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                    <tr>
                        <td><%= order.orderId %></td>
                        <td><%= formatDate(order.createdAt) %></td>
                      
                        <td>
                         <%=order.status%>
                        </td>
                        <!-- <td>â‚¹<%= order.totalPrice %></td> -->
                        <td>
                            <form class="status-form" data-order-id="<%= order._id %>">
                                <select name="status" class="form-select status-select <%= order.status.toLowerCase() %>">
                                    <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                    <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                    <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                    <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                    <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                    <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                                </select>
                            </form>
                        </td>
                        <td>
                            <% if (order.returnRequest) { %>
                                <% if (order.returnRequest.status === 'Requested') { %>
                                    <button class="btn btn-info" 
                                            onclick="viewReturnRequest('<%= order._id %>', `<%= order.returnRequest.reason %>`)">
                                        View Request
                                    </button>
                                <% } else { %>
                                    <span class="badge <%= order.returnRequest.status === 'Approved' ? 'bg-success' : 'bg-danger' %>">
                                        <%= order.returnRequest.status %>
                                    </span>
                                <% } %>
                            <% } else { %>
                                <span class="text-muted">No Request</span>
                            <% } %>
                        </td>
                        <td>
                            <button type="button" class="btn btn-primary" onclick="viewDetailes('<%= order._id %>')">
                                View Details
                            </button>
                        </td>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <% for (let i=1; i <=totalPages; i++) { %>
                        <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>">
                                <%= i %>
                            </a>
                        </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const statusForms = document.querySelectorAll('.status-form');

            statusForms.forEach(form => {
                const select = form.querySelector('.status-select');

                select.addEventListener('change', async function () {
                    const orderId = form.getAttribute('data-order-id');
                    const newStatus = this.value;

                    const result = await Swal.fire({
                        title: 'Confirm Status Update',
                        text: `Are you sure you want to update the order status to ${newStatus}?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, update it!',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33'
                    });

                    if (result.isConfirmed) {

                        Swal.fire({
                            title: 'Updating...',
                            didOpen: () => {
                                Swal.showLoading();
                            },
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            allowEnterKey: false
                        });

                        try {
                            const response = await fetch(`/admin/order/${orderId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status: newStatus })
                            });

                            const data = await response.json();

                            if (data.success) {
                                await Swal.fire({
                                    title: 'Success!',
                                    text: 'Order status updated successfully',
                                    icon: 'success',
                                    timer: 2000,
                                    timerProgressBar: true
                                });

                                function updateStatusUI(orderId, newStatus) {
   
    const statusSelect = document.querySelector(`.status-form[data-order-id="${orderId}"] .status-select`);
    if (statusSelect) {
       
        statusSelect.classList.remove('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'returned');
        
        statusSelect.classList.add(newStatus.toLowerCase());
    }
}                            } else {
                                throw new Error(data.message || 'Error updating status');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            await Swal.fire({
                                title: 'Error!',
                                text: error.message || 'Failed to update order status',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });

                            select.value = select.getAttribute('data-previous-value');
                        }
                    } else {
                     
                        select.value = select.getAttribute('data-previous-value');
                    }
                });

             
                select.addEventListener('focus', function () {
                    this.setAttribute('data-previous-value', this.value);
                });
            });

            function updateStatusUI(orderId, newStatus) {
              
                const statusElement = document.querySelector(`[data-status-id=${orderId}]`);
                if (statusElement) {
              
                    statusElement.classList.remove('pending', 'processing', 'shipped', 'delivered', 'cancelled');
                
                    statusElement.classList.add(newStatus.toLowerCase());
                }
            }
        });


        function viewDetailes(orderId) {
    window.location.href = `/admin/orderDetails/${orderId}`;
}





  
  
    
    function removeOffer(offerId) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'You won\'t be able to revert this!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/admin/remove-offer/${offerId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire('Deleted!', data.message, 'success');
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire('Error!', error.message || 'Something went wrong!', 'error');
            }
        }
    });
}









async function viewReturnRequest(orderId, reason) {
    const { value: formValues } = await Swal.fire({
        title: 'Return Request Details',
        html: `
            <div class="mb-3">
                <label class="form-label"><strong>Customer's Reason:</strong></label>
                <p>${reason}</p>
            </div>
            <div class="mb-3">
                <label for="admin-note" class="form-label">Admin Note:</label>
                <textarea id="admin-note" class="form-control" placeholder="Enter your response note..."></textarea>
            </div>
            <div class="mb-3">
                <label class="form-label">Action:</label>
                <select id="return-status" class="form-select">
                    <option value="Approved">Approve Return</option>
                    <option value="Rejected">Reject Return</option>
                </select>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Submit',
        cancelButtonText: 'Cancel',
        preConfirm: () => {
            const status = document.getElementById('return-status').value;
            const adminNote = document.getElementById('admin-note').value;
            
            if (!adminNote.trim()) {
                Swal.showValidationMessage('Please enter an admin note');
                return false;
            }
            
            return { status, adminNote };
        }
    });

    if (formValues) {
        try {
            Swal.fire({
                title: 'Processing...',
                text: 'Handling return request',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/admin/return-request/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    status: formValues.status,
                    adminNote: formValues.adminNote
                })
            });

            const data = await response.json();

            if (data.success) {
                await Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    timer: 2000
                });
               
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Something went wrong!',
                icon: 'error'
            });
        }
    }
}


    </script>

</body>

</html>