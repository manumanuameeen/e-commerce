<%- include('../partials/admin/header') %>
<!-- Cropper.js CDN links -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<style>
    .image-cropper {
        max-width: 100%;
        position: relative;
        margin-top: 1rem;
    }
    
    .cropper-container {
        max-width: 100%;
    }
    
    .thumbnail {
        position: relative;
        display: inline-block;
        margin: 5px;
    }
    
    .remove-icon {
        position: absolute;
        top: -8px;
        right: -8px;
        background: red;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        cursor: pointer;
    }
    
    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }
    
    /* Style for the cropper preview */
    .preview-container {
        width: 100%;
        margin-top: 1rem;
    }
    
    /* Ensure the cropped preview image fits within its container */
    .image-cropper img {
        max-width: 100%;
        height: auto;
    }
    
    /* Style for the save button */
    .save-crop-btn {
        margin-top: 0.5rem;
        padding: 0.375rem 0.75rem;
        background-color: #0d6efd;
        color: white;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
    }
    
    .save-crop-btn:hover {
        background-color: #0b5ed7;
    }
    </style>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
                <div>
                    <div id="error-message" class="alert alert-danger" style="display: none;"></div>
                </div>
            </div>
        </div>
        
        <!-- Basic Information Card -->
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>Basic</h4>
                </div>
                <div class="card-body">
                    <form id="productSubmitForm" method="post" action="/admin/addProducts" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="productName" class="form-label">Product title</label>
                            <input type="text" name="productName" placeholder="Type here" class="form-control" id="productName" />
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-4">
                            <label for="descriptionid" class="form-label">Full description</label>
                            <textarea name="description" placeholder="Type here" class="form-control" id="descriptionid" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="regularPrice" class="form-label">Regular price</label>
                                    <input name="regularPrice" placeholder="₹" type="text" class="form-control" id="regularPrice" />
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="salePrice" class="form-label">Sale price</label>
                                    <input name="salePrice" placeholder="₹" type="text" class="form-control" id="salePrice" />
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <label for="category" class="form-label">Category</label>
                            <select name="category" class="form-control" id="category">
                                <% for(let i=0; i<cat.length; i++) { %>
                                    <option value="<%=cat[i].name%>"><%=cat[i].name%></option>
                                <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        
                        <div class="col-lg-8">
                            <div class="mb-4">
                                <label class="form-label">Product Colors and Quantities</label>
                                <div id="colorsContainer">
                                    <div class="color-entry mb-3">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <input type="text" id="color" name="colors[]" class="form-control" placeholder="Enter Color (e.g., Red, Blue)">
                                            </div>
                                            <div class="col-md-4">
                                                <input type="number" id="quantity" name="quantities[]" class="form-control" placeholder="Quantity" min="0">
                                            </div>
                                            <div class="col-md-2">
                                                <button type="button" class="btn btn-danger remove-color">Remove</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-secondary" id="addMoreColors">Add More Colors</button>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn btn-md rounded font-sm hover-up">Publish</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Image Upload Cards -->
        <div class="col-lg-6">
            <div class="row">
                <% for(let i=1; i<=3; i++) { %>
                    <div class="col-lg-6">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Media <%= i %></h4>
                            </div>
                            <div class="card-body">
                                <div id="addedImagesContainer<%= i %>" class="thumbnails-container"></div>
                                <img id="imageView<%= i %>" src="/uploads/re-image" alt="Image preview <%= i %>" style="max-width: 100%; display: none;" />
                                <div class="input-upload">
                                    <input class="form-control" type="file" id="input<%= i %>" name="images" 
                                           accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, '<%= i %>')">
                                </div>
                                <div id="images-error<%= i %>" class="error-message"></div>
                                <div class="image-cropper" style="display: none;">
                                    <img src="" id="croppedImg<%= i %>" alt="Cropped preview <%= i %>">
                                    <button type="button" id="saveButton<%= i %>" class="btn btn-primary btn-sm mt-2">Save Crop</button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</section>
<script>

// Initialize global variables
const cropperInstances = {};
const croppedImages = {};

function viewImage(event, index) {
    const file = event.target.files[0];
    const acceptedTypes = ['image/jpeg', 'image/png', 'image/jpg'];

    if (!acceptedTypes.includes(file.type)) {
        displayErrorMessage(`images-error${index}`, 'Please select a valid image file (JPG, JPEG, or PNG).');
        event.target.value = '';
        return;
    }

    const reader = new FileReader();
    reader.onload = function() {
        const image = document.getElementById(`imageView${index}`);
        if (!image) {
            console.error('Image view element not found');
            return;
        }

        image.src = reader.result;
        image.style.display = 'block';

        // Create thumbnail preview
        const thumbnailContainer = document.getElementById(`addedImagesContainer${index}`);
        thumbnailContainer.innerHTML = `
            <div class="thumbnail">
                <img src="${reader.result}" alt="Thumbnail ${index}" style="width: 50px; height: 50px; object-fit: cover;">
            </div>`;

        // Initialize or reinitialize cropper
        if (cropperInstances[index]) {
            cropperInstances[index].destroy();
        }

        cropperInstances[index] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true,
        });

        const cropperContainer = document.querySelector(`#imageView${index}`).parentNode.querySelector('.image-cropper');
        cropperContainer.style.display = 'block';

        // Setup save button with proper event handling
        const saveButton = document.getElementById(`saveButton${index}`);
        if (saveButton) {
            // Remove old event listeners by cloning and replacing the button
            const newSaveButton = saveButton.cloneNode(true);
            saveButton.parentNode.replaceChild(newSaveButton, saveButton);

            newSaveButton.addEventListener('click', () => {
                const cropper = cropperInstances[index];
                if (cropper) {
                    const croppedCanvas = cropper.getCroppedCanvas({
                        width: 600,
                        height: 600,
                        imageSmoothingEnabled: true,
                        imageSmoothingQuality: 'high',
                    });
                    
                    croppedImages[index] = croppedCanvas.toDataURL('image/jpeg', 0.9);
                    
                    // Update thumbnail
                    const thumbnailContainer = document.getElementById(`addedImagesContainer${index}`);
                    thumbnailContainer.innerHTML = `
                        <div class="thumbnail">
                            <img src="${croppedImages[index]}" alt="Thumbnail ${index}" style="width: 50px; height: 50px; object-fit: cover;">
                        </div>`;
                    
                    // Update cropped preview
                    const croppedImg = document.getElementById(`croppedImg${index}`);
                    if (croppedImg) {
                        croppedImg.src = croppedImages[index];
                    }
                    
                    // Hide cropper elements
                    cropperContainer.style.display = 'none';
                    image.style.display = 'none';
                    
                    // Cleanup cropper
                    cropper.destroy();
                    delete cropperInstances[index];
                }
            });
        }
    };
    reader.readAsDataURL(file);
}

// Add color variants functionality
document.addEventListener('DOMContentLoaded', function() {
    const addMoreColorsBtn = document.getElementById('addMoreColors');
    const colorsContainer = document.getElementById('colorsContainer');

    if (addMoreColorsBtn && colorsContainer) {
        addMoreColorsBtn.addEventListener('click', function() {
            const newEntry = document.createElement('div');
            newEntry.classList.add('color-entry', 'mb-3');
            newEntry.innerHTML = `
                <div class="row">
                    <div class="col-md-4">
                        <input type="text" name="colors[]" class="form-control" placeholder="Enter Color (e.g., Red, Blue)">
                    </div>
                    <div class="col-md-4">
                        <input type="number" name="quantities[]" class="form-control" placeholder="Quantity" min="0">
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger remove-color">Remove</button>
                    </div>
                </div>
            `;
            colorsContainer.appendChild(newEntry);
        });

        // Event delegation for remove buttons
        colorsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-color')) {
                event.target.closest('.color-entry').remove();
            }
        });
    }
});

// Form submission handler
async function handleSubmit(event) {
    event.preventDefault();
    
    if (!validateForm()) {
        return false;
    }

    try {
        const form = document.getElementById('productSubmitForm');
        const formData = new FormData(form);

        // Handle color variants
        formData.delete('colors[]');
        formData.delete('quantities[]');
        
        const colorEntries = document.querySelectorAll('.color-entry');
        colorEntries.forEach((entry) => {
            const colorInput = entry.querySelector('input[name="colors[]"]');
            const quantityInput = entry.querySelector('input[name="quantities[]"]');
            
            if (colorInput && colorInput.value && quantityInput && quantityInput.value) {
                formData.append('colors', colorInput.value);
                formData.append('quantities', quantityInput.value);
            }
        });

        // Handle images
        const hasImages = Object.keys(croppedImages).length > 0;
        if (!hasImages) {
            throw new Error('Please select and crop at least one image.');
        }

        for (const [index, dataUrl] of Object.entries(croppedImages)) {
            const response = await fetch(dataUrl);
            const blob = await response.blob();
            formData.append('images', blob, `image-${Date.now()}-${index}.jpg`);
        }

        const response = await fetch(form.action, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            window.location.href = '/admin/addProducts';
        } else {
            throw new Error(result.message || 'Error saving product');
        }

    } catch (error) {
        console.error('Submission error:', error);
        const errorDiv = document.getElementById('error-message');
        errorDiv.textContent = `Error saving product: ${error.message}`;
        errorDiv.style.display = 'block';
    }
}

// Form validation helper functions
function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const validations = {
        productName: {
            element: document.getElementById('productName'),
            rules: [
                {
                    test: value => value.trim() !== '',
                    message: 'Please enter a product name.'
                },
                {
                    test: value => /^[\w\s-]+$/.test(value.trim()),
                    message: 'Product name can only contain letters, numbers, spaces, and hyphens.'
                }
            ]
        },
        description: {
            element: document.getElementById('descriptionid'),
            rules: [
                {
                    test: value => value.trim().length >= 10,
                    message: 'Description must be at least 10 characters long.'
                }
            ]
        },
        regularPrice: {
            element: document.getElementById('regularPrice'),
            rules: [
                {
                    test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) >= 0,
                    message: 'Please enter a valid non-negative price.'
                }
            ]
        },
        salePrice: {
            element: document.getElementById('salePrice'),
            rules: [
                {
                    test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) >= 0,
                    message: 'Please enter a valid non-negative price.'
                }
            ]
        }
    };

    // Validate each field
    for (const [fieldName, validation] of Object.entries(validations)) {
        if (validation.element) {
            const value = validation.element.value;
            for (const rule of validation.rules) {
                if (!rule.test(value)) {
                    displayErrorMessage(`${fieldName}-error`, rule.message);
                    isValid = false;
                    break;
                }
            }
        }
    }

  
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const salePrice = parseFloat(document.getElementById('salePrice').value);
    if (!isNaN(regularPrice) && !isNaN(salePrice) && regularPrice <= salePrice) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
    
    const errorMessage = document.getElementById('error-message');
    if (errorMessage) {
        errorMessage.style.display = 'none';
        errorMessage.textContent = '';
    }
}

// Initialize form submit handler
document.getElementById('productSubmitForm').addEventListener('submit', handleSubmit);
</script>

<%- include('../partials/admin/footer') %>