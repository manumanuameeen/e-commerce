<%- include('../partials/admin/header') %>
<!-- Add Cropper.js CDN links -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<!-- Add custom styles for cropper -->
<style>
.image-cropper {
    max-width: 100%;
    position: relative;
    margin-top: 1rem;
}

.cropper-container {
    max-width: 100%;
}

.thumbnail {
    position: relative;
    display: inline-block;
    margin: 5px;
}

.remove-icon {
    position: absolute;
    top: -8px;
    right: -8px;
    background: red;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    cursor: pointer;
}

.error-message {
    color: red;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
}

/* Style for the cropper preview */
.preview-container {
    width: 100%;
    margin-top: 1rem;
}

/* Ensure the cropped preview image fits within its container */
.image-cropper img {
    max-width: 100%;
    height: auto;
}

/* Style for the save button */
.save-crop-btn {
    margin-top: 0.5rem;
    padding: 0.375rem 0.75rem;
    background-color: #0d6efd;
    color: white;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
}

.save-crop-btn:hover {
    background-color: #0b5ed7;
}
</style>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
                <div>
                    <div id="error-message" class="alert alert-danger" style="display: none;"></div>
                </div>
            </div>
        </div>
        <!-- Basic Information Card -->
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>Basic</h4>
                </div>
                <div class="card-body">
                    <form id="productSubmitForm" method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return handleSubmit(event)">
                        <input type="hidden" name="croppedImages" id="croppedImagesInput" />
                        <div class="mb-4">
                            <label for="productName" class="form-label">Product title</label>
                            <input type="text" name="productName" placeholder="Type here" class="form-control" id="productName" />
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label for="descriptionid" class="form-label">Full description</label>
                            <textarea name="description" placeholder="Type here" class="form-control" id="descriptionid" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="regularPrice" class="form-label">Regular price</label>
                                    <div class="row gx-2">
                                        <input name="regularPrice" placeholder="$" type="text" class="form-control" id="regularPrice" />
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="salePrice" class="form-label">Sale price</label>
                                    <input name="salePrice" placeholder="$" type="text" class="form-control" id="salePrice" />
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="category" class="form-label">Category</label>
                            <select name="category" class="form-control" id="category">
                                <% for(let i=0; i<cat.length; i++) { %>
                                    <option value="<%=cat[i].name%>"><%=cat[i].name%></option>
                                <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="color" class="form-label">Color</label>
                                    <input name="color" type="text" placeholder="e.g., Red, Blue" class="form-control" id="color" />
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="mb-4">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input name="quantity" type="number" placeholder="Enter quantity" class="form-control" id="quantity" min="0" />
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-md rounded font-sm hover-up">Publish</button>
                    </form>
                </div>
            </div>
        </div>

     
        <div class="col-lg-6">
            <div class="row">
                <% for(let i=1; i<=3; i++) { %>
                    <div class="col-lg-6">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Media <%= i %></h4>
                            </div>
                            <div class="card-body">
                                <div id="addedImagesContainer<%= i %>" class="thumbnails-container"></div>
                                <img id="imageView<%= i %>" src="" alt="Image preview <%= i %>" style="max-width: 100%; display: none;" />
                                <div class="input-upload">
                                    <input class="form-control" type="file" id="input<%= i %>" name="images" 
                                           accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, '<%= i %>')">
                                </div>
                                <div class="image-cropper d-flex align-items-center" style="display:none; margin-top: 20px;">
                                    <img src="" id="croppedImg<%= i %>" alt="Cropped preview <%= i %>">
                                    <button type="button" id="saveButton<%= i %>" class="btn-sm btn-primary mt-2">Save</button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</section>

<script>
const cropperInstances = {};
const croppedImages = {};
// Function to handle image preview and cropping
function viewImage(event, index) {
    const file = event.target.files[0];
    const acceptedTypes = ['image/jpeg', 'image/png', 'image/jpg'];

    if (!acceptedTypes.includes(file.type)) {
        displayErrorMessage(`images-error${index}`, 'Please select a valid image file (JPG, JPEG, or PNG).');
        event.target.value = '';
        return;
    }

    const reader = new FileReader();
    reader.onload = function () {
        const image = document.getElementById(`imageView${index}`);
        if (!image) {
            console.error('Image view element not found');
            return;
        }

        image.src = reader.result;
        image.style.display = 'block';

        // Create object URL for thumbnail
        const thumbnail = document.createElement('img');
        console.log(thumbnail);
        
        thumbnail.src = URL.createObjectURL(file);
        thumbnail.onload = () => URL.revokeObjectURL(thumbnail.src);
        thumbnail.alt = `Thumbnail ${index}`;
        thumbnail.style.width = '50px';
        thumbnail.style.height = 'auto';

        const container = document.getElementById(`addedImagesContainer${index}`);
        container.innerHTML = '';
        container.appendChild(thumbnail);

        // Initialize or update cropper instance
        if (cropperInstances[index]) {
            cropperInstances[index].destroy();
        }

        cropperInstances[index] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true,
        });

        const croppedImg = document.getElementById(`croppedImg${index}`);
        const cropperContainer = croppedImg.parentNode;
        cropperContainer.style.display = 'block';

        const saveButton = document.getElementById(`saveButton${index}`);
        const newSaveButton = saveButton.cloneNode(true);
        saveButton.parentNode.replaceChild(newSaveButton, saveButton);

        newSaveButton.addEventListener('click', () => {
            const cropper = cropperInstances[index];
            const croppedCanvas = cropper.getCroppedCanvas();
            croppedImg.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
            croppedImages[index,data] = croppedCanvas.toDataURL('image/jpeg', 0.9);
            cropperContainer.style.display = 'none';
            cropper.destroy();
            delete cropperInstances[index];
        });
    };
    reader.readAsDataURL(file);
}


// Form validation and submission
async function handleSubmit(event) {
    event.preventDefault();
    
    if (!validateForm()) {
        return false;

    }

    try {
        const form = document.getElementById('productSubmitForm');
        const formData = new FormData(form);

        // console.log("ivide  unde",formData)
       
        for (const [index, dataUrl] of Object.entries(croppedImages)) {
            // console.log("inside the ",index,DataUrl);
            
            const response = await fetch(dataUrl);
            const blob = await response.blob();
           
            formData.append('images', blob, `image-${Date.now()}-${index}.jpg`);
        }

        const response = await fetch(form.action, {
            method: 'POST',
            body: formData
        });


        const result = await response.json()

        console.log("the respose after fetching the data",response);
        

        if (response.ok) {
            window.location.href = '/admin/addProducts';
        } else {
            const error = await response.text();
            throw new Error(error);
            console.log("error undeee",error);
            
        }
        location.reload();
    } catch (error) {
        displayErrorMessage('error-message', 'Error saving product. Please try again.');
        console.error('Error:', error);
        return false;
    }
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const validations = {
        productName: {
            element: document.getElementById('productName'),
            rules: [
                {
                    test: value => value.trim() !== '',
                    message: 'Please enter a product name.'
                },
                {
                    test: value => /^[\w\s-]+$/.test(value.trim()),
                    message: 'Product name can only contain letters, numbers, spaces, and hyphens.'
                }
            ]
        },
        description: {
            element: document.getElementById('descriptionid'),
            rules: [
                {
                    test: value => value.trim().length >= 10,
                    message: 'Description must be at least 10 characters long.'
                }
            ]
        },
        regularPrice: {
            element: document.getElementById('regularPrice'),
            rules: [
                {
                    test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) >= 0,
                    message: 'Please enter a valid non-negative price.'
                }
            ]
        },
        salePrice: {
            element: document.getElementById('salePrice'),
            rules: [
                {
                    test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) >= 0,
                    message: 'Please enter a valid non-negative price.'
                }
            ]
        },
        quantity: {
            element: document.getElementById('quantity'),
            rules: [
                {
                    test: value => value !== '' && parseInt(value) >= 0,
                    message: 'Please enter a valid non-negative quantity.'
                }
            ]
        },
        color: {
            element: document.getElementById('color'),
            rules: [
                {
                    test: value => value.trim() !== '',
                    message: 'Please enter a color.'
                }
            ]
        }
    };

    // Validate each field
    for (const [fieldName, validation] of Object.entries(validations)) {
        const value = validation.element.value;
        
        for (const rule of validation.rules) {
            if (!rule.test(value)) {
                displayErrorMessage(`${fieldName}-error`, rule.message);
                isValid = false;
                break;
            }
        }
    }

    // Compare regular price and sale price
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const salePrice = parseFloat(document.getElementById('salePrice').value);
    if (!isNaN(regularPrice) && !isNaN(salePrice) && regularPrice <= salePrice) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    // Validate images
    let hasImage = false;
    for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        if (input.files && input.files.length > 0) {
            hasImage = true;
            break;
        }
    }
    
    if (!hasImage) {
        displayErrorMessage('images-error1', 'Please select at least one image.');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        errorElement.style.color = 'red';
        errorElement.style.fontSize = '0.875rem';
        errorElement.style.marginTop = '0.25rem';
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
    
    const errorMessage = document.getElementById('error-message');
    if (errorMessage) {
        errorMessage.style.display = 'none';
        errorMessage.textContent = '';
    }
}
</script>

<%- include('../partials/admin/footer') %>