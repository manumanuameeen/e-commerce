<%- include("../partials/admin/header") %>

    <head>
        <style>
            .thumbnails-container {
                display: flex;
                overflow-x: auto;
            }


            .thumbnail {
                margin-right: 10px;
            }

            .input-upload {
                position: relative;
            }


            .error-message {
                color: red;
                display: none;
            }

            .variant-row {
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 10px;
            }

            .btn-danger {
                background-color: #ff0000;
                border-color: #ff0000;
            }

            .btn-success {
                background-color: #28a745;
                border-color: #28a745;
            }

            .form-select,
            .form-control {
                background-color: #fff;
                border: 1px solid #ced4da;
            }
        </style>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>


                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">


                    <div class="card-body">
                        <form method="post" action="/admin/edit-Product/<%= product._id %>"
                            enctype="multipart/form-data">


                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%=product.productName%>"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <input name="descriptionData" value="<%= product.description%>"
                                    class="form-control border" rows="4">
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            value="<%=product.regularPrice%>" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input name="salePrice" type="text" value="<%= product.salePrice%>"
                                            class="form-control border">
                                    </div>
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>

                            </div>

                            <div class="card mb-4">

                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h4>Color Variants</h4>
                                    </div>
                                    <div class="card-body">
                                        <div id="colorVariantsContainer">
                                            <% if(product.colorVarients && product.colorVarients.length> 0) { %>
                                                <% product.colorVarients.forEach((variant, index)=> { %>
                                                    <div class="variant-row mb-3">
                                                        <div class="row align-items-center">
                                                            <div class="col-md-4">
                                                                <input type="text" name="colors[]" class="form-control"
                                                                    placeholder="Enter color (e.g., Navy Blue)"
                                                                    value="<%= variant.color %>" required>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <input type="number" name="quantities[]"
                                                                    class="form-control" value="<%= variant.quantity %>"
                                                                    placeholder="Enter quantity" min="0" required>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <button type="button" class="btn btn-danger"
                                                                    onclick="removeVariant(this)">Remove</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <% }) %>
                                                        <% } %>
                                        </div>
                                        <div id="variant-error" class="error-message"></div>
                                        <button type="button" class="btn btn-success" onclick="addVariant()">Add Color
                                            Variant</button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="mb-4">
                                            <label for="category" class="form-label">Category</label>
                                            <select name="category" class="form-control" id="category">
                                                <% for(let i=0; i<cat.length; i++) { %>
                                                    <option value="<%=cat[i].name%>">
                                                        <%=cat[i].name%>
                                                    </option>
                                                    <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <%for(let i=0; i<product.productImage.length; i++){%>
                                    <div class="col-md-12">
                                        <div class="mb-4">
                                            <div class="col-12">
                                                <td>
                                                    <input type="hidden" value="<%=product.productImage[i]%>"
                                                        id="imageDatas">
                                                    <img class="rounded" style="width: 50px; height: 60px;"
                                                        src="/uploads/re-image/<%=product.productImage[i]%>" alt="">
                                                    <i onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')"
                                                        style="position: absolute; color:red; margin-left: .5rem; cursor: pointer;"
                                                        class="fa-solid fa-trash"></i>
                                                </td>
                                            </div>
                                        </div>
                                    </div>
                                    <%}%>
                                        <div class="card-body">
                                            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                <img src="" alt="" id="imgView1">
                                                <input class="form-control" type="file" name="images" id="input1"
                                                    accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage1(event), viewImage(event, 1)">
                                                <div id="images-error" class="error-message"></div>
                                            </div>
                                            <div class="image-cropper d-flex align-items-center"
                                                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                <img src="" id="croppedImg1" alt="">
                                                <button type="button" id="saveButton1"
                                                    class="btn-sm btn-primary">Save</button>
                                            </div>
                                            <div class="row">
                                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                    <img src="" alt="" id="imgView2">
                                                    <input class="form-control" type="file" name="images" id="input2"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="viewImage2(event),viewImage(event, 2)">
                                                </div>
                                                <div class="image-cropper d-flex align-items-center"
                                                    style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                    <img src="" id="croppedImg2" alt="">
                                                    <button type="button" id="saveButton2"
                                                        class="btn-sm btn-primary">Save</button>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                    <img src="" alt="" id="imgView3">
                                                    <input class="form-control" type="file" name="images" id="input3"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="viewImage3(event),viewImage(event, 3)">
                                                </div>
                                                <div class="image-cropper d-flex align-items-center"
                                                    style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                    <img src="" id="croppedImg3" alt="">
                                                    <button type="button" id="saveButton3"
                                                        class="btn-sm btn-primary">Save</button>
                                                </div>
                                            </div>


                                        </div>
                            </div>
                            <div>


                                <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="button"
                                    onclick="validateAndSubmit()">Update</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <%- include("../partials/admin/footer") %>
        <script>

            function addVariant() {
                const container = document.getElementById('colorVariantsContainer');
                const newVariant = document.createElement('div');
                newVariant.classList.add('variant-row', 'mb-3');

                newVariant.innerHTML = `
        <div class="row align-items-center">
            <div class="col-md-4">
                <input type="text" 
                       name="colors[]" 
                       class="form-control"
                       placeholder="Enter color (e.g., Navy Blue)"
                       required>
            </div>
            <div class="col-md-4">
                <input type="number" 
                       name="quantities[]" 
                       class="form-control" 
                       placeholder="Enter quantity"
                       min="0" 
                       required>
            </div>
            <div class="col-md-4">
                <button type="button" class="btn btn-danger" onclick="removeVariant(this)">Remove</button>
            </div>
        </div>
    `;

                container.appendChild(newVariant);
            }

            function removeVariant(button) {
                const variantRow = button.closest('.variant-row');
                variantRow.remove();
            }

            function validateVariants() {
                const colors = document.getElementsByName('colors[]');
                const quantities = document.getElementsByName('quantities[]');

                if (colors.length === 0) {
                    displayErrorMessage('variant-error', 'At least one color variant is required.');
                    return false;
                }

                const colorValues = Array.from(colors).map(input => input.value.trim().toLowerCase());
                if (colorValues.some(color => color === '')) {
                    displayErrorMessage('variant-error', 'Color name cannot be empty.');
                    return false;
                }

                if (new Set(colorValues).size !== colorValues.length) {
                    displayErrorMessage('variant-error', 'Duplicate colors are not allowed.');
                    return false;
                }


                for (let i = 0; i < quantities.length; i++) {
                    if (quantities[i].value < 0 || quantities[i].value === '') {
                        displayErrorMessage('variant-error', 'All quantities must be valid numbers greater than or equal to 0.');
                        return false;
                    }
                }

                return true;
            }


            function validateAndSubmit() {
                if (validateForm()) {
                    document.forms[0].submit();
                }
            }




            function validateForm() {
                let imageDatas = false
                console.log("validate form");
                clearErrorMessages();
                const name = document.getElementsByName('productName')[0].value;
                const description = document.getElementsByName('descriptionData')[0].value;
                const price = document.getElementsByName('regularPrice')[0].value;
                const saleprice = document.getElementsByName('salePrice')[0].value;
                const category = document.getElementsByName('category')[0].value;
                const images = document.getElementById('input1')
                // const quantity = document.getElementsByName('quantity')
                const colorVariants = document.querySelectorAll("#colorVariantsContainer .variant-row");


                imageDatas = document.getElementById("imageDatas")?.value;
                let isValid = true;
                if (name.trim() === "") {
                    displayErrorMessage('productName-error', 'Please enter a product name.');
                    isValid = false;
                }

                if (description === '') {
                    displayErrorMessage('description-error', 'Please enter a product description.');
                    isValid = false;
                }


                // if (parseInt(quantity) < 0) {
                //     displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                //     isValid = false;
                // }




                if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                    displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }
                if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                    displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }


                if (!imageDatas && images.files.length === 0) {
                    displayErrorMessage("images-error", 'Please select an image.');
                    isValid = false;
                }
                if (colorVariants.length === 0) {
                    displayErrorMessage("variant-error", "Please add at least one color variant.");
                    isValid = false;
                } else {
                    colorVariants.forEach((variant, index) => {
                        const colorInput = variant.querySelector("input[name='colors[]']");
                        const quantityInput = variant.querySelector("input[name='quantities[]']");

                        if (!colorInput.value.trim()) {
                            displayErrorMessage("variant-error", "Color name cannot be empty.");
                            isValid = false;
                        }

                        if (quantityInput.value === "" || parseInt(quantityInput.value) < 0) {
                            displayErrorMessage("variant-error", "Please enter a valid non-negative quantity.");
                            isValid = false;
                        }
                    });
                }
                return isValid;
            }

            function displayErrorMessage(elementId, message) {
                var errorElement = document.getElementById(elementId);
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }


            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.innerText = '';
                });
                const errorMessage = document.getElementById('errorMessage');


            }




            function viewImage1(event) {
                document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage2(event) {
                document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage3(event) {
                document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
            }


            function viewImage4(event) {
                document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
            }




            function viewImage(event, index) {
                let input = event.target;
                let reader = new FileReader();
                reader.onload = function () {
                    let dataURL = reader.result;
                    let image = document.getElementById('imgView' + index);
                    image.src = dataURL;
                    let cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true
                    });
                    let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                    cropperContainer.style.display = 'block';
                    let saveButton = document.querySelector('#saveButton' + index);
                    saveButton.addEventListener('click', async function () {
                        let croppedCanvas = cropper.getCroppedCanvas();
                        let croppedImage = document.getElementById("croppedImg" + index);
                        croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                        let timestamp = new Date().getTime();
                        let fileName = `cropped-img-${timestamp}-${index}.png`;
                        await croppedCanvas.toBlob(blob => {
                            let input = document.getElementById('input' + index);
                            let imgFile = new File([blob], fileName, blob)
                            const fileList = new DataTransfer();
                            fileList.items.add(imgFile);
                            input.files = fileList.files
                        });
                        cropperContainer.style.display = 'none';
                    });
                };
                reader.readAsDataURL(input.files[0]);
            }


            const selectedImages = [];
            document.getElementById("imageInput").addEventListener("change", handleFileSelect);


            function handleFileSelect(event) {
                const addedImagesContainer = document.getElementById("addedImagesContainer");
                addedImagesContainer.innerHTML = "";
                const files = event.target.files;
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    selectedImages.push(file);
                    const thumbnail = document.createElement("div");
                    thumbnail.classList.add("thumbnail");
                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.alt = "thumbnail";
                    img.style.width = "50px";
                    img.style.height = "auto";
                    const removeIcon = document.createElement("span");
                    removeIcon.classList.add("remove-icon");
                    removeIcon.innerHTML = "&times;";
                    removeIcon.addEventListener("click", function () {
                        const index = selectedImages.indexOf(file);
                        if (index !== -1) {
                            selectedImages.splice(index, 1);
                        }
                        thumbnail.remove();
                    });
                    thumbnail.appendChild(img);
                    thumbnail.appendChild(removeIcon);
                    addedImagesContainer.appendChild(thumbnail);
                }
            };


            function deleteSingleImage(imageId, productId) {
                fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        imageNameToServer: imageId,
                        productIdToServer: productId,
                    }),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.status === true) {
                            window.location.reload();
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });

            }

        </script>