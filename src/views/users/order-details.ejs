<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Order History</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<style>
    #admin-message-box {
        width: 300px;
        padding: 10px;
        background-color: #cce5ff;
        border: 1px solid #b8daff;
        position: relative;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    }

    #admin-message-box button {
        position: absolute;
        top: 5px;
        right: 5px;
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        color: #004085;
    }

    #admin-message-box p {
        color: #004085;
        font-weight: bold;
        margin: 0;
    }

    .cancel-item-btn {
        background-color: #EF4444;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: background-color 0.2s, transform 0.1s;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .cancel-item-btn:hover {
        background-color: #DC2626;
        transform: translateY(-1px);
    }

    .retry-payment-btn {
        background-color: #FF9800;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(255, 152, 0, 0.2);
        border: none;
        font-weight: 500;
    }

    .retry-payment-btn:hover {
        background-color: #F57C00;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px rgba(255, 152, 0, 0.25);
    }

    .order-item {
        transition: all 0.2s ease;
        border-left: 3px solid transparent;
    }

    .order-item:hover {
        background-color: #f9fafb;
        border-left: 3px solid #9CA3AF;
    }

    .payment-pending-badge {
        background-color: #FFECB3;
        color: #E65100;
        font-weight: 500;
    }

    .order-table-wrapper {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .order-table-wrapper:hover {
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }

    .product-image {
        transition: transform 0.3s ease;
    }

    .order-item:hover .product-image {
        transform: scale(1.05);
    }

    .table-divider {
        height: 1px;
        background: linear-gradient(to right, transparent, #E5E7EB, transparent);
    }

    .download-invoice-btn {
        width: 150px;
        height: 30px;
        /* justify-content: center; */
        background-color:  rgb(59, 35, 194);
        border-color: black;
        color: rgb(255, 255, 255);
        display: flex;
        justify-content: center;
        /* Centers horizontally */
        align-items: center;
        /* Centers vertically */
        /* border-radius: 0.375rem; */
        font-size: 0.875rem;
    border-radius: 2px;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        border: none;
        font-weight: 500;
    }

    .download-invoice-btn:hover {
        background-color: #4338CA;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px rgba(79, 70, 229, 0.25);
    }
</style>
</head>

<!-- <body class="min-h-screen bg-gray-50"> -->
<div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Header -->
    <div class="flex items-center justify-between mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Order History</h1>
            <p class="text-gray-500 mt-1">Manage your orders and returns</p>
        </div>
        <button onclick="goToProfile()"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-all hover:shadow">
            <i class="fas fa-arrow-left mr-2"></i>
            Back to Profile
        </button>
    </div>

    <!-- Orders List -->
    <div class="space-y-6">
        <div class="bg-white rounded-lg overflow-hidden order-table-wrapper">
            <!-- Order Header -->
            <div class="border-b border-gray-100 p-6 bg-gradient-to-r from-gray-50 to-white">
                <div class="flex justify-between items-start">
                    <div class="space-y-1">
                        <div class="flex items-center gap-2">
                            <i class="fas fa-box text-gray-500"></i>
                            <h2 class="text-lg font-semibold text-gray-800">Order #<%= order.orderId %>
                            </h2>
                        </div>
                        <p class="text-sm text-gray-500">Placed on <%= order.createdAt.toDateString() %>
                        </p>
                    </div>
                    <div>
                        <% const statusColors={ 'Pending' : 'bg-yellow-100 text-yellow-800' , 'Processing'
                            : 'bg-blue-100 text-blue-800' , 'Shipped' : 'bg-purple-100 text-purple-800' , 'Delivered'
                            : 'bg-green-100 text-green-800' , 'Cancelled' : 'bg-red-100 text-red-800'
                            , 'Payment Pending' : 'payment-pending-badge' }; %>
                            <span
                                class="px-3 py-1 rounded-full text-sm <%= statusColors[order.status] || 'bg-gray-100 text-gray-800' %>">
                                <% if (order.status==='Payment Pending' ) { %>
                                    <i class="fas fa-exclamation-circle mr-1"></i>
                                    <% } %>
                                        <%= order.status %>
                            </span>

                            <span> </span>


                    </div>
                </div>
            </div>

            <% order.orderIteams.forEach((item, index)=> { %>
                <div
                    class="flex items-center p-6 order-item <%= index < order.orderIteams.length - 1 ? 'border-b border-gray-100' : '' %>">
                    <div class="w-20 h-20 rounded-lg overflow-hidden bg-gray-100 flex-shrink-0">
                        <img src="/uploads/re-image/<%= item.product.productImage[0] %>" alt="<%= item.productName %>"
                            class="w-full h-full object-cover product-image">
                    </div>
                    <div class="flex-1 ml-6">
                        <h3 class="font-medium text-gray-900">
                            <%= item.productName %>
                        </h3>
                        <div class="mt-2 grid grid-cols-2 gap-x-4 gap-y-1">
                            <p class="text-sm text-gray-500">Price: <span class="font-medium text-gray-700">₹<%=
                                        item.price.toFixed(2) %></span></p>
                            <p class="text-sm text-gray-500">Quantity: <span class="font-medium text-gray-700">
                                    <%= item.quantity %>
                                </span></p>
                            <p class="text-sm text-gray-500">Status:
                                <span class="font-medium <%= 
                                    item.status === 'Pending' ? 'text-yellow-600' : 
                                    item.status === 'Payment Pending' ? 'text-orange-600' :
                                    item.status === 'Processing' ? 'text-blue-600' :
                                    item.status === 'Shipped' ? 'text-purple-600' :
                                    item.status === 'Delivered' ? 'text-green-600' :
                                    item.status === 'Cancelled' ? 'text-red-600' :
                                    'text-gray-600' 
                                %>">
                                    <%= item.status %>
                                </span>
                            </p>
                            <p class="text-sm text-gray-500">Color: <span class="font-medium text-gray-700">
                                    <%= item.color %>
                                </span></p>
                        </div>
                    </div>
                    <% if (item.status==='Pending' || item.status==='Processing' && item.status !=='Payment Pending' ) {
                        %>
                        <button
                            onclick="openItemCancellationModal('<%= item._id %>', '<%= item.productName %>', '<%= order.orderId %>', '/uploads/re-image/<%= item.product.productImage[0] %>')"
                            class="cancel-item-btn">
                            <i class="fas fa-times-circle mr-1"></i> Cancel Item
                        </button>
                        <% } else if (item.status==='Payment Pending' ) { %>
                            <button onclick="initializeRetryPayment('<%= order._id %>', '<%= order.finalAmount %>')"
                                class="retry-payment-btn">
                                <i class="fas fa-sync-alt mr-1"></i> Retry Payment
                            </button>
                            <% } else { %>
                                <p class="text-gray-500 text-sm italic">No further actions available.</p>
                                <% } %>
                </div>
                <% }) %>

                    <!-- Order Summary -->
                    <div class="bg-gray-50 p-6">
                        <div class="space-y-3 mb-4">
                            <div class="flex justify-between text-gray-600">
                                <span>Subtotal</span>
                                <span>₹<%= order.totalPrice.toFixed(2) %></span>
                            </div>
                            <div class="flex justify-between text-gray-600">
                                <span>Discount</span>
                                <span class="text-green-600">-₹<%= order.discount %></span>
                            </div>
                            <div class="flex justify-between text-gray-600">
                                <span>Tax</span>
                                <span class="text-gray-600">+<%= order.tax %>%</span>
                            </div>
                            <div class="flex justify-between text-gray-600">
                                <span>Tax Amount</span>
                                <span class="text-gray-600">₹<%=((order.totalPrice * 18) / 100).toFixed(2) %></span>
                            </div>
                            <div class="table-divider my-2"></div>
                            <div class="flex justify-between font-semibold text-gray-900">
                                <span>Total</span>
                                <span>₹<%=((order.totalPrice * 18) / 100+order.finalAmount).toFixed(2)%></span>
                            </div>

                        </div>

                        <div class="mt-6 flex gap-4 justify-end">
                            <% if (order.status==="Pending" || order.status==="Processing" ) { %>
                                <button onclick="cancelOrder('<%= order._id %>')"
                                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors shadow-sm hover:shadow">
                                    <i class="fas fa-ban mr-1"></i> Cancel Order
                                </button>
                                <% } %>

                                    <% if (order.status==="Delivered" || order.status==="Shipped" ) { %>
                                        <button onclick="requestReturn('<%= order._id %>')"
                                            class="px-4 py-2 bg-gray-600 text-black rounded-lg hover:bg-gray-700 transition-colors shadow-sm hover:shadow  ">
                                            <i class="fas fa-undo-alt mr-1"></i> Request Return
                                        </button>
                                        <% } %>

                                            <% if (order.status==="Payment Pending" ) { %>
                                                <button style="background-color: #FFECB3;"
                                                    onclick="initializeRetryPayment('<%= order._id %>', '<%= order.finalAmount %>')"
                                                    class="px-4 py-2 bg-orange-500 text-orange rounded-lg hover:bg-orange-600 transition-all shadow-sm hover:shadow">
                                                    <i class="fas fa-credit-card mr-1"></i> Retry Payment
                                                </button>
                                                <% } %>

                        </div>

                        <% if (order.status==="Returned" && order.returnRequest && order.returnRequest.adminResponse) {
                            %>
                            <div id="admin-message-box"
                                class="p-4 bg-yellow-50 border border-yellow-200 rounded-md mt-4 shadow-sm">
                                <button onclick="this.parentElement.style.display='none'"
                                    class="text-yellow-600 float-right hover:text-yellow-800">×</button>
                                <p class="text-yellow-800 text-sm">
                                    <i class="fas fa-comment-dots mr-1"></i> Admin Note: <%=
                                        order.returnRequest.adminResponse.note %>
                                </p>
                            </div>
                            <% } %>
                    </div>
        </div>
    </div>

    <div id="singleCancelModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4 transform transition-all">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Cancel Item</h3>
                <button onclick="closeItemCancellationModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="space-y-4">
                <div class="selected-item-details mb-4 p-3 bg-gray-50 rounded-md">
                    <p class="text-sm text-gray-600">Selected Item:</p>
                    <p id="selectedItemName" class="font-medium"></p>
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Reason for cancellation
                    </label>
                    <select id="singleCancelReason"
                        class="w-full p-2 border rounded-md focus:ring-2 focus:ring-indigo-200 focus:border-indigo-300">
                        <option value="">Select a reason</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Found better price">Found better price elsewhere</option>
                        <option value="Ordered wrong item">Ordered wrong item</option>
                        <option value="Shipping time too long">Shipping time too long</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div id="otherReasonDiv" class="mb-4 hidden">
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Please specify
                    </label>
                    <textarea id="otherReasonText"
                        class="w-full p-2 border rounded-md focus:ring-2 focus:ring-indigo-200 focus:border-indigo-300"
                        rows="3"></textarea>
                </div>
            </div>

            <div class="flex justify-end gap-3 mt-6">
                <button onclick="closeItemCancellationModal()"
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                    Cancel
                </button>
                <button onclick="processItemCancellation()"
                    class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 transition-colors">
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>
    <br>
    <div style="justify-content: center;">
        <% if (order.status ) { %>
            <button onclick="generateInvoice('<%= order._id %>')" class="download-invoice-btn">
                <i class="fas fa-file-invoice mr-1"></i> Invoice
            </button>
            <% } %>
    </div>


</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    let selectedProductId = null;
    let currentOrderId = null;
    let selectedItemId = null;


    function goToProfile() {
        window.location.href = "/Profile";
    }


    function openItemCancellationModal(itemId, itemName, orderId, imageUrl) {
        selectedProductId = itemId;
        currentOrderId = orderId;
        document.getElementById('selectedItemName').textContent = itemName;

        document.getElementById('singleCancelModal').classList.remove('hidden');
        document.getElementById('singleCancelModal').classList.add('flex');

        // Add animation
        setTimeout(() => {
            document.querySelector('#singleCancelModal > div').classList.add('scale-100');
            document.querySelector('#singleCancelModal > div').classList.remove('scale-95');
        }, 10);
    }

    function closeItemCancellationModal() {
        // Add closing animation
        document.querySelector('#singleCancelModal > div').classList.add('scale-95');
        document.querySelector('#singleCancelModal > div').classList.remove('scale-100');

        setTimeout(() => {
            document.getElementById('singleCancelModal').classList.add('hidden');
            document.getElementById('singleCancelModal').classList.remove('flex');
            document.getElementById('singleCancelReason').value = '';
            document.getElementById('otherReasonText').value = '';
            document.getElementById('otherReasonDiv').classList.add('hidden');
            selectedProductId = null;
            currentOrderId = null;
        }, 200);
    }

    document.getElementById('singleCancelReason').addEventListener('change', function (e) {
        const otherReasonDiv = document.getElementById('otherReasonDiv');
        if (e.target.value === 'Other') {
            otherReasonDiv.classList.remove('hidden');
        } else {
            otherReasonDiv.classList.add('hidden');
        }
    });

    async function processItemCancellation() {
        const reasonSelect = document.getElementById('singleCancelReason');
        const otherReasonText = document.getElementById('otherReasonText');
        let reason = reasonSelect.value;

        if (!reason) {
            Swal.fire({
                title: "Error",
                text: "Please select a reason for cancellation",
                icon: "error"
            });
            return;
        }

        if (reason === 'Other') {
            reason = otherReasonText.value.trim();
            if (!reason) {
                Swal.fire({
                    title: "Error",
                    text: "Please specify your reason for cancellation",
                    icon: "error"
                });
                return;
            }
        }

        try {
            const response = await fetch(`/cancelOrderItem/${currentOrderId}/${selectedProductId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason })
            });

            const data = await response.json();

            if (data.success) {
                await Swal.fire({
                    title: "Success",
                    text: "Item cancelled successfully. Refund will be processed to your wallet.",
                    icon: "success"
                });
                window.location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: "Error",
                text: error.message || "Failed to cancel item",
                icon: "error"
            });
        } finally {
            closeItemCancellationModal();
        }
    }


    async function cancelOrder(orderId) {
        const { value: reason } = await Swal.fire({
            title: 'Cancel Order',
            html: `
        <div class="text-left">
            <div class="mb-3">
                <input type="radio" id="reason1" name="cancelReason" value="Changed my mind" class="mr-2">
                <label for="reason1">Changed my mind</label>
            </div>
            <div class="mb-3">
                <input type="radio" id="reason2" name="cancelReason" value="Found better price elsewhere" class="mr-2">
                <label for="reason2">Found better price elsewhere</label>
            </div>
            <div class="mb-3">
                <input type="radio" id="reason3" name="cancelReason" value="Incorrect item ordered" class="mr-2">
                <label for="reason3">Incorrect item ordered</label>
            </div>
            <div class="mb-3">
                <input type="radio" id="reason4" name="cancelReason" value="Delivery time too long" class="mr-2">
                <label for="reason4">Delivery time too long</label>
            </div>
            <div class="mb-3">
                <input type="radio" id="reason5" name="cancelReason" value="Payment issues" class="mr-2">
                <label for="reason5">Payment issues</label>
            </div>
            <div class="mb-3">
                <input type="radio" id="reasonOther" name="cancelReason" value="other" class="mr-2">
                <label for="reasonOther">Other</label>
            </div>
            <div id="otherReasonContainer" class="hidden mt-4">
                <textarea id="otherReasonText" class="w-full p-2 border rounded" 
                    placeholder="Please specify your reason..."></textarea>
            </div>
        </div>
        `,
            showCancelButton: true,
            confirmButtonText: 'Cancel Order',
            cancelButtonText: 'Keep Order',
            confirmButtonColor: '#dc2626',
            didOpen: () => {
                const radios = document.getElementsByName('cancelReason');
                const otherContainer = document.getElementById('otherReasonContainer');

                radios.forEach(radio => {
                    radio.addEventListener('change', (e) => {
                        if (e.target.value === 'other') {
                            otherContainer.classList.remove('hidden');
                        } else {
                            otherContainer.classList.add('hidden');
                        }
                    });
                });
            },
            preConfirm: () => {
                const selectedReason = document.querySelector('input[name="cancelReason"]:checked');
                if (!selectedReason) {
                    Swal.showValidationMessage('Please select a reason');
                    return false;
                }

                if (selectedReason.value === 'other') {
                    const otherReason = document.getElementById('otherReasonText').value.trim();
                    if (!otherReason) {
                        Swal.showValidationMessage('Please specify your reason');
                        return false;
                    }
                    return otherReason;
                }

                return selectedReason.value;
            }
        });

        if (!reason) return;

        try {
            const response = await fetch(`/orderCancel/${orderId}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason })
            });

            const data = await response.json();
            if (data.success) {
                await Swal.fire({
                    title: "Order Cancelled",
                    text: 'Your order has been cancelled successfully.',
                    icon: "success",
                    confirmButtonText: 'OK'
                });
                window.location.reload();
            } else {
                await Swal.fire({
                    title: "Order Cancellation Failed",
                    text: data.message || "Your order cancellation failed",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                title: "Error",
                text: "An error occurred while canceling the order",
                icon: "error",
                confirmButtonText: "OK"
            });
        }
    }

    async function requestReturn(orderId) {
        try {
            const { value: reason } = await Swal.fire({
                title: 'Request Return',
                html: `
            <div class="text-left">
                <div class="mb-3">
                    <input type="radio" id="returnReason1" name="returnReason" value="Defective/Damaged product" class="mr-2">
                    <label for="returnReason1">Defective/Damaged product</label>
                </div>
                <div class="mb-3">
                    <input type="radio" id="returnReason2" name="returnReason" value="Wrong size/color" class="mr-2">
                    <label for="returnReason2">Wrong size/color</label>
                </div>
                <div class="mb-3">
                    <input type="radio" id="returnReason3" name="returnReason" value="Product not as described" class="mr-2">
                    <label for="returnReason3">Product not as described</label>
                </div>
                <div class="mb-3">
                    <input type="radio" id="returnReason4" name="returnReason" value="Quality issues" class="mr-2">
                    <label for="returnReason4">Quality issues</label>
                </div>
                <div class="mb-3">
                    <input type="radio" id="returnReason5" name="returnReason" value="Received wrong item" class="mr-2">
                    <label for="returnReason5">Received wrong item</label>
                </div>
                <div class="mb-3">
                    <input type="radio" id="returnReasonOther" name="returnReason" value="other" class="mr-2">
                    <label for="returnReasonOther">Other</label>
                </div>
                <div id="returnOtherReasonContainer" class="hidden mt-4">
                    <textarea id="returnOtherReasonText" class="w-full p-2 border rounded" 
                        placeholder="Please specify your reason for return..."></textarea>
                </div>
            </div>
            `,
                showCancelButton: true,
                confirmButtonText: 'Submit Return Request',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#4B5563',
                allowOutsideClick: false,
                didOpen: () => {
                    const radios = document.getElementsByName('returnReason');
                    const otherContainer = document.getElementById('returnOtherReasonContainer');

                    radios.forEach(radio => {
                        radio.addEventListener('change', (e) => {
                            if (e.target.value === 'other') {
                                otherContainer.classList.remove('hidden');
                            } else {
                                otherContainer.classList.add('hidden');
                            }
                        });
                    });
                },
                preConfirm: () => {
                    const selectedReason = document.querySelector('input[name="returnReason"]:checked');
                    if (!selectedReason) {
                        Swal.showValidationMessage('Please select a reason');
                        return false;
                    }

                    if (selectedReason.value === 'other') {
                        const otherReason = document.getElementById('returnOtherReasonText').value.trim();
                        if (!otherReason) {
                            Swal.showValidationMessage('Please specify your reason');
                            return false;
                        }
                        return otherReason;
                    }

                    return selectedReason.value;
                }
            });

            if (!reason) return;

            Swal.fire({
                title: 'Submitting Return Request',
                text: 'Please wait...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/requestReturn/${orderId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    reason,
                    orderId
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.success) {
                await Swal.fire({
                    title: "Return Requested",
                    text: 'Your return request has been submitted successfully.',
                    icon: "success",
                    confirmButtonText: 'OK'
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Return request failed');
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                title: "Error",
                text: error.message || "An error occurred while submitting the return request",
                icon: "error",
                confirmButtonText: "OK"
            });
        }
    }

    async function initializeRetryPayment(orderId, amount) {
        try {
            const response = await fetch('/create-razorpay-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
            });

            const orderData = await response.json();

            if (!orderData.success) {
                throw new Error(orderData.message || 'Failed to create order');
            }

            const options = {
                key: orderData.razorpayKeyId,
                amount: orderData.amount * 100,
                currency: "INR",
                name: "Aranoz",
                description: "Order Payment Retry",
                order_id: orderData.razorpayOrderId,
                handler: function (response) {
                    verifyRetryPayment(orderId, response);
                },
                prefill: {
                    name: orderData.customerName || "",
                    email: orderData.customerEmail || "",
                    contact: orderData.customerPhone || ""
                },
                theme: { color: "#FF9800" },
                modal: {
                    ondismiss: function () {
                        console.log("Payment window closed");
                        handlePaymentFailure(response, orderId)
                    }
                }
            };

            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (response) {
                handlePaymentFailure(response, orderId);
            });
            rzp.open();

        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to initialize payment'
            });
        }
    }


    async function initializeRetryPayment(orderId, amount) {
        try {
            const response = await fetch('/create-razorpay-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
            });

            const orderData = await response.json();

            if (!orderData.success) {
                throw new Error(orderData.message || 'Failed to create order');
            }

            const options = {
                key: orderData.razorpayKeyId,
                amount: orderData.amount,
                currency: "INR",
                name: "Aranoz",
                description: "Order Payment Retry",
                order_id: orderData.razorpayOrderId,
                handler: function (response) {
                    verifyRetryPayment(orderId, response);
                },
                prefill: {
                    name: orderData.customerName || "",
                    email: orderData.customerEmail || "",
                    contact: orderData.customerPhone || ""
                },
                theme: { color: "#F59E0B" },
                modal: {
                    ondismiss: function () {
                        console.log("Payment window closed");
                        handlePaymentFailure(response, orderId)
                    }
                }
            };

            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (response) {
                handlePaymentFailure(response, orderId);
            });
            rzp.open();

        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to initialize payment'
            });
        }
    }

    async function verifyRetryPayment(orderId, response) {
        try {
            const verifyResponse = await fetch('/verify-razorpay-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    orderId,
                    razorpayOrderId: response.razorpay_order_id,
                    razorpayPaymentId: response.razorpay_payment_id,
                    razorpaySignature: response.razorpay_signature
                })
            });

            const data = await verifyResponse.json();

            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful',
                    text: 'Your order has been confirmed!'
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Payment verification failed');
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: error.message || 'Failed to verify payment'
            });
        }
    }

    function handlePaymentFailure(response, orderId) {
        console.log("Payment failure:", response);
        const failureMessage = response.error ? response.error.description : 'Payment failed';

        Swal.fire({
            title: "Payment Failed",
            text: `${failureMessage}. Would you like to try again?`,
            icon: "error",
            showCancelButton: true,
            confirmButtonText: "Retry Payment",
            cancelButtonText: "Maybe Later",
            confirmButtonColor: "#F59E0B",
            cancelButtonColor: "#d33"
        }).then((result) => {
            if (result.isConfirmed) {
                initializeRetryPayment(orderId);
            }
        });
    }

    function showLoadingSpinner() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.style.display = 'flex';
    }

    function hideLoadingSpinner() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.style.display = 'none';
    }

    function showAlert(message, type) {
        const alertElement = document.createElement('div');
        alertElement.className = `alert alert-${type}`;
        alertElement.textContent = message;
        document.body.appendChild(alertElement);
        setTimeout(() => alertElement.remove(), 5000);
    }



    function generateInvoice(orderId) {
        Swal.fire({
            title: 'Generating Invoice',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch(`/getOrderDetails/${orderId}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch order details');
                }

                createInvoicePDF(data.order, data.userData);
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to generate invoice'
                });
            });
    }

    function createInvoicePDF(order, userData) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: 'a4'
        });

        doc.setProperties({
            title: `Invoice-${order.orderId}`,
            subject: 'Order Invoice',
            author: 'Aranoz',
            creator: 'Aranoz E-commerce'
        });

        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const margin = 15;
        const usableWidth = pageWidth - (margin * 2);

        // Colors
        doc.setDrawColor(241, 90, 36);
        doc.setFillColor(241, 90, 36);

        doc.rect(0, 0, pageWidth, 15, 'F');

        doc.rect(0, pageHeight - 15, pageWidth, 15, 'F');



        doc.setFontSize(11);
        doc.text('Aranoz', margin + 0, 30);
        doc.setFontSize(9);
        doc.text('Perinthalmanna Street', margin + 0, 35);
        doc.text('Phone: +91 12345 67890', margin + 0, 40);


        doc.setFontSize(20);
        doc.setTextColor(100, 100, 100);
        doc.text('INVOICE', pageWidth - margin - 30, 35);


        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text('DATE', pageWidth - margin - 30, 45);
        doc.line(pageWidth - margin - 30, 46, pageWidth - margin, 46);
        doc.text(new Date(order.createdAt).toLocaleDateString(), pageWidth - margin - 30, 50);

        doc.setFontSize(8);

        if (order.status === 'Payment Pending') {
            doc.setTextColor(255, 0, 0);
        } else {
            doc.setTextColor(0, 128, 0);
        }

        doc.text(`Payment terms: ${order.status === 'Payment Pending' ? 'Due immediately' : 'Paid'}`, margin, 70);

        doc.setFontSize(10);
        doc.setTextColor(50, 50, 50);
        doc.text('BILL TO', margin, 80);
        doc.setFontSize(9);
        doc.text(order.address?.name || 'Customer Name', margin, 85);
        doc.text(order.address?.street || 'Customer Address', margin, 90);
        doc.text(`${order.address?.city || 'City'}, ${order.address?.state || 'State'} ${order.address?.pincode || 'Pincode'}`, margin, 95);
        doc.text(order.address?.phone || 'Phone', margin, 100);
        doc.text(userData?.email || 'Email', margin, 105);

        doc.setFontSize(10);
        doc.text('SHIP TO', pageWidth / 2, 80);
        doc.setFontSize(9);
        doc.text(order.address?.name || 'Customer Name', pageWidth / 2, 85);
        doc.text(order.address?.street || 'Customer Address', pageWidth / 2, 90);
        doc.text(`${order.address?.city || 'City'}, ${order.address?.state || 'State'} ${order.address?.pincode || 'Pincode'}`, pageWidth / 2, 95);
        doc.text(order.address?.phone || 'Phone', pageWidth / 2, 100);

        const tableTop = 115;
        const tableWidth = usableWidth;
        const colWidth = [tableWidth * 0.45, tableWidth * 0.15, tableWidth * 0.2, tableWidth * 0.2];

        doc.setFillColor(241, 90, 36);
        doc.rect(margin, tableTop, tableWidth, 8, 'F');
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(9);
        doc.text('NAME', margin + 5, tableTop + 5);
        doc.text('QTY', margin + colWidth[0] + 5, tableTop + 5);
        doc.text('UNIT PRICE', margin + colWidth[0] + colWidth[1] + 5, tableTop + 5);
        doc.text('TOTAL', margin + colWidth[0] + colWidth[1] + colWidth[2] + 5, tableTop + 5);

        let yPos = tableTop + 8;
        doc.setTextColor(50, 50, 50);

        order.orderIteams.forEach((item, index) => {
            if (yPos > pageHeight - 60) {
                doc.addPage();
                yPos = margin + 10;

                doc.setDrawColor(241, 90, 36);
                doc.setFillColor(241, 90, 36);
                doc.rect(0, 0, pageWidth, 15, 'F');
                doc.rect(0, pageHeight - 15, pageWidth, 15, 'F');
            }

            doc.setDrawColor(220, 220, 220);
            doc.line(margin, yPos, margin + tableWidth, yPos);
            doc.line(margin, yPos + 10, margin + tableWidth, yPos + 10);
            doc.line(margin, yPos, margin, yPos + 10);
            doc.line(margin + colWidth[0], yPos, margin + colWidth[0], yPos + 10);
            doc.line(margin + colWidth[0] + colWidth[1], yPos, margin + colWidth[0] + colWidth[1], yPos + 10);
            doc.line(margin + colWidth[0] + colWidth[1] + colWidth[2], yPos, margin + colWidth[0] + colWidth[1] + colWidth[2], yPos + 10);
            doc.line(margin + tableWidth, yPos, margin + tableWidth, yPos + 10);

            doc.setFontSize(8);
            doc.text(item.productName + (item.color ? ` (${item.color})` : ''), margin + 2, yPos + 5);
            doc.text(item.quantity.toString(), margin + colWidth[0] + 5, yPos + 5);
            doc.text(`${item.price.toFixed(2)}`, margin + colWidth[0] + colWidth[1] + 5, yPos + 5);
            doc.text(`${(item.price * item.quantity).toFixed(2)}`, margin + colWidth[0] + colWidth[1] + colWidth[2] + 5, yPos + 5);

            yPos += 10;
        });

        yPos += 5;
        doc.setFontSize(8);
        doc.text('Remarks / Payment Instructions:', margin, yPos);
        doc.text(order.status === 'Payment Pending' ? 'Payment pending. Please complete payment to process order.' : 'Thank you for your business.', margin, yPos + 5);


        const GST_RATE = 18;

        const taxAmount = (order.finalAmount * GST_RATE) / 100;

        const summaryX = pageWidth - margin - 50;
        doc.setDrawColor(220, 220, 220);

        doc.text('SUBTOTAL', summaryX, yPos);
        doc.text(`${order.totalPrice.toFixed(2)}`, pageWidth - margin - 5, yPos, { align: 'right' });

        yPos += 5;
        doc.text('DISCOUNT', summaryX, yPos);
        doc.text(`${order.discount.toFixed(2)}`, pageWidth - margin - 5, yPos, { align: 'right' });

        yPos += 5;
        doc.text('GST RATE', summaryX, yPos);
        doc.text(`${GST_RATE}%`, pageWidth - margin - 5, yPos, { align: 'right' });

        yPos += 5;
        doc.text('TOTAL TAX', summaryX, yPos);
        doc.text(`${taxAmount.toFixed(2)}`, pageWidth - margin - 5, yPos, { align: 'right' });

        yPos += 5;
        doc.text('SHIPPING/HANDLING', summaryX, yPos);
        doc.text('0.00', pageWidth - margin - 5, yPos, { align: 'right' });

        yPos += 8;
        const finalAmount = order.finalAmount ;
        doc.setFillColor(253, 233, 233);
        doc.rect(summaryX - 10, yPos - 5, 70, 10, 'F');
        doc.setFontSize(9);
        doc.setTextColor(50, 50, 50);
        doc.text('Balance Due', summaryX, yPos);
        doc.text(`${finalAmount.toFixed(2)}`, pageWidth - margin - 5, yPos, { align: 'right' });
        doc.save(`Invoice-${order.orderId}.pdf`);

        Swal.close();

        Swal.fire({
            icon: 'success',
            title: 'Invoice Generated',
            text: 'Your invoice has been downloaded successfully.'
        });
    }


</script>