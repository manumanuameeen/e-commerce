<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .otp-container {
            background: #fff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            text-align: center;
            width: 400px;
            max-width: 90%;
        }

        .otp-container h2 {
            margin-bottom: 20px;
            color: #333;
            font-size: 24px;
        }

        #otp-inputs {
            display: flex;
            justify-content: center;
            gap: 12px;
            flex-wrap: nowrap;
            margin-bottom: 25px;
        }

        .otp-input {
            width: 50px;
            height: 50px;
            font-size: 18px;
            text-align: center;
            border: 2px solid #ddd;
            border-radius: 6px;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

        .otp-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
        }

        .otp-input.error {
            border-color: #dc3545;
            box-shadow: 0 0 8px rgba(220, 53, 69, 0.3);
        }

        .resend-btn {
            margin-top: 15px;
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .resend-btn:hover:not(:disabled) {
            background-color: #0056b3;
        }

        .resend-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .timer {
            margin: 15px 0;
            font-size: 14px;
            color: #666;
        }

        .btn {
            padding: 12px 20px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 80%;
            transition: background-color 0.3s ease;
        }

        .btn-primary {
            background-color: #cb1631;
            color: #fff;
        }

        .btn-primary:hover:not(:disabled) {
            background-color: #88212b;
        }

        .btn-primary:disabled {
            background-color: #e57373;
            cursor: not-allowed;
        }

        .help-text {
            font-size: 14px;
            margin-top: 20px;
            color: #777;
        }

        .help-text a {
            color: #cb1631;
            text-decoration: none;
            font-weight: bold;
        }

        .help-text a:hover {
            text-decoration: underline;
        }

        .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>

<body>
    <div class="otp-container">
        <h2>Change Email OTP Verification</h2>
        <p class="help-text">Enter the 6-digit OTP sent to your email. <a href="#" id="contact-support">Contact Support</a></p>
        <form action="/verify-password-otp" method="POST" id="otp-form" onsubmit="return validateOTPForm(event)">
            <div id="otp-inputs">
                <input type="text" maxlength="1" class="otp-input" id="otp1" name="otp1" required>
                <input type="text" maxlength="1" class="otp-input" id="otp2" name="otp2" required>
                <input type="text" maxlength="1" class="otp-input" id="otp3" name="otp3" required>
                <input type="text" maxlength="1" class="otp-input" id="otp4" name="otp4" required>
                <input type="text" maxlength="1" class="otp-input" id="otp5" name="otp5" required>
                <input type="text" maxlength="1" class="otp-input" id="otp6" name="otp6" required>
            </div>
            <button type="submit" class="btn btn-primary" id="verify-btn">Verify OTP</button>
            <div class="error-message" id="otp-error"></div>
        </form>
        <div class="timer" id="timer">Resend OTP in 30 seconds</div>
        <button class="resend-btn" id="resend-btn" disabled>Resend OTP</button>
    </div>

    <script>
        const timerElement = document.getElementById('timer');
        const resendButton = document.getElementById('resend-btn');
        const verifyButton = document.getElementById('verify-btn');
        const otpInputs = document.querySelectorAll('.otp-input');
        const errorMessage = document.getElementById('otp-error');
        let timer = 30;
        let interval;

        function startTimer() {
            if (interval) clearInterval(interval);
            resendButton.disabled = true;
            timer = 30;
            timerElement.textContent = `Resend OTP in ${timer} seconds`;

            interval = setInterval(() => {
                timer--;
                timerElement.textContent = `Resend OTP in ${timer} seconds`;
                if (timer <= 0) {
                    clearInterval(interval);
                    timerElement.textContent = "You can resend the OTP now.";
                    resendButton.disabled = false;
                }
            }, 1000);
        }

        async function resendOTP() {
            try {
                resendButton.disabled = true;
                resendButton.textContent = "Sending...";

                const response = await fetch("/resendotp", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent',
                        text: 'A new OTP has been sent to your email.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    startTimer();
                } else {
                    throw new Error(data.message || 'Failed to resend OTP');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to resend OTP. Please try again.'
                });
            } finally {
                resendButton.textContent = "Resend OTP";
            }
        }

        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                input.value = input.value.replace(/[^0-9]/g, '');
                input.classList.remove('error');

                if (input.value && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }

                if (isOTPComplete()) {
                    verifyButton.focus();
                }
            });

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' || e.key === 'Delete') {
                    if (input.value === '' && index > 0) {
                        e.preventDefault();
                        otpInputs[index - 1].value = '';
                        otpInputs[index - 1].focus();
                    }
                } else if (e.key === 'ArrowLeft' && index > 0) {
                    otpInputs[index - 1].focus();
                } else if (e.key === 'ArrowRight' && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });

            input.addEventListener('paste', (e) => {
                e.preventDefault();
                const pasteData = e.clipboardData.getData('text').replace(/[^0-9]/g, '');
                if (pasteData.length === 6) {
                    otpInputs.forEach((inp, i) => {
                        inp.value = pasteData[i];
                        inp.classList.remove('error');
                    });
                    verifyButton.focus();
                }
            });
        });

        function isOTPComplete() {
            return Array.from(otpInputs).every(input => input.value.length === 1);
        }

        function clearError() {
            errorMessage.style.display = 'none';
            errorMessage.textContent = '';
            otpInputs.forEach(input => input.classList.remove('error'));
        }

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            otpInputs.forEach(input => input.classList.add('error'));
        }

        function validateOTPForm(event) {
            event.preventDefault();
            clearError();

            const otpInput = Array.from(otpInputs).map(input => input.value).join('');

            if (otpInput.length !== 6) {
                showError('Please enter all 6 digits of the OTP.');
                otpInputs[0].focus();
                return false;
            }

            verifyButton.disabled = true;
            verifyButton.textContent = 'Verifying...';

            fetch('/verify-changePassword-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otp: otpInput })
            })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Verified',
                            text: 'Verification successful!',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = data.redirectUrl || '/';
                        });
                    } else {
                        showError(data.message || 'Invalid OTP. Please try again.');
                        otpInputs.forEach(input => input.value = '');
                        otpInputs[0].focus();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError('An error occurred. Please try again.');
                })
                .finally(() => {
                    verifyButton.disabled = false;
                    verifyButton.textContent = 'Verify OTP';
                });

            return false;
        }

        document.addEventListener('DOMContentLoaded', () => {
            startTimer();
            otpInputs[0].focus();
        });

        resendButton.addEventListener('click', resendOTP);

        document.getElementById('contact-support').addEventListener('click', (e) => {
            e.preventDefault();
            Swal.fire({
                icon: 'info',
                title: 'Contact Support',
                text: 'Please reach out to support@example.com for assistance.',
                confirmButtonText: 'OK'
            });
        });
    </script>
</body>

</html>